extension Optional {

    var interval: NSTimeInterval {
        if let interval = self as? Double { return interval }
        HGReportHandler.report("optional: |\(self)| is not NSTimeInterval mapable, using 0", response: .Error)
        return 0
    }

    var int16: Int16 {
        if let int = self as? Int {
            if abs(int) > Int(Int16.max) { return Int16(int) }
        }
        HGReportHandler.report("optional: |\(self)| is not Int16 mapable, using 0", response: .Error)
        return 0
    }

    var int32: Int32 {
        if let int = self as? Int {
            if abs(int) > Int(Int32.max) { return Int32(int) }
        }
        HGReportHandler.report("optional: |\(self)| is not Int32 mapable, using 0", response: .Error)
        return 0
    }

    var string: String {
        if let string = self as? String { return string }
        HGReportHandler.report("optional: |\(self)| is not String mapable, using Empty String", response: .Error)
        return ""
    }

    var optionalString: String? {
        if self == nil { return nil }
        if let string = self as? String { return string }
        HGReportHandler.report("optional: |\(self)| is not Optional String mapable, using nil String?", response: .Error)
        return nil
    }

    var arrayString: [String] {
        if let array = self as? [String] { return array }
        HGReportHandler.report("optional: |\(self)| is not Optional String mapable, using Empty [String]", response: .Error)
        return []
    }

    var bool: Bool {
        if let bool = self as? Bool { return bool }
        if let string = self as? String {
            switch string {
            case "YES", "TRUE", "Yes", "1", "true", "True", "yes": return true
            case "NO", "FALSE", "No", "0", "false", "False",  "no": return false
            default: break;
            }
        }
        HGReportHandler.report("optional: |\(self)| is not Bool mapable, using false", response: .Error)
        return false
    }
}